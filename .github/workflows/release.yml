name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write
  packages: write

jobs:
  generate-changelog:
    name: Generate changelog
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy -- -D warnings -A deprecated

      - name: Run tests
        run: cargo test --all-features

      - name: Install cliff
        run: cargo install git-cliff

      - name: Extract version and generate changelog
        id: version
        run: |
          # Extract version from tag (remove 'v' prefix)
          VERSION=${GITHUB_REF_NAME#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Updating version to: $VERSION"

          # Update Cargo.toml version (portable sed for both GNU and BSD)
          if [[ "${{ runner.os }}" == "macOS" ]]; then
            sed -i '' "s/^version = \".*\"/version = \"$VERSION\"/" Cargo.toml
          else
            sed -i "s/^version = \".*\"/version = \"$VERSION\"/" Cargo.toml
          fi

          # Update full changelog with git-cliff
          git-cliff --config cliff.toml --latest --output CHANGELOG.md

          # Generate release notes with git-cliff
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          # Generate release changelog using git-cliff
          if [ -n "$LAST_TAG" ]; then
            # Generate changelog between tags
            git-cliff --config cliff.toml ${LAST_TAG}..${{ github.ref_name }} --strip header > CLIFF_CHANGES.md
          else
            # Generate changelog for first release
            git-cliff --config cliff.toml --tag ${{ github.ref_name }} --strip header > CLIFF_CHANGES.md
          fi

          # Create the release note template
          echo "# DroidTUI ${VERSION}" > RELEASE_CHANGELOG.md
          echo "" >> RELEASE_CHANGELOG.md
          echo "## 🚀 What's New" >> RELEASE_CHANGELOG.md
          echo "" >> RELEASE_CHANGELOG.md

          if [ -n "$LAST_TAG" ]; then
            echo "### 📝 Changes since ${LAST_TAG}:" >> RELEASE_CHANGELOG.md
            echo "" >> RELEASE_CHANGELOG.md
          else
            echo "### 🎉 Initial Release" >> RELEASE_CHANGELOG.md
            echo "" >> RELEASE_CHANGELOG.md
          fi

          # Add the git-cliff generated changes to the release notes
          cat CLIFF_CHANGES.md >> RELEASE_CHANGELOG.md

          # Add installation and quick start info
          echo "" >> RELEASE_CHANGELOG.md
          echo "## 📦 Installation" >> RELEASE_CHANGELOG.md
          echo "" >> RELEASE_CHANGELOG.md
          echo "```bash" >> RELEASE_CHANGELOG.md
          echo "cargo install droidtui" >> RELEASE_CHANGELOG.md
          echo "```" >> RELEASE_CHANGELOG.md
          echo "" >> RELEASE_CHANGELOG.md
          echo "## 🚀 Quick Start" >> RELEASE_CHANGELOG.md
          echo "" >> RELEASE_CHANGELOG.md
          echo "```bash" >> RELEASE_CHANGELOG.md
          echo "# Run DroidTUI" >> RELEASE_CHANGELOG.md
          echo "droidtui" >> RELEASE_CHANGELOG.md
          echo "" >> RELEASE_CHANGELOG.md
          echo "# Navigate with vim-style keys" >> RELEASE_CHANGELOG.md
          echo "# Use j/k or arrow keys to navigate" >> RELEASE_CHANGELOG.md
          echo "# Press Enter or → to enter sub-menus" >> RELEASE_CHANGELOG.md
          echo "# Press Esc or q to quit" >> RELEASE_CHANGELOG.md
          echo "```" >> RELEASE_CHANGELOG.md

          # Show the generated release notes
          echo "Generated release notes:"
          cat RELEASE_CHANGELOG.md

      - name: Upload changelog
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: |
            RELEASE_CHANGELOG.md
            CHANGELOG.md

  build:
    name: Build for ${{ matrix.os }}
    needs: generate-changelog
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: droidtui
            asset_name: linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: droidtui.exe
            asset_name: windows-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: droidtui
            asset_name: macos-x86_64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Update version in Cargo.toml
        shell: python
        run: |
          import re
          version = "${{ needs.generate-changelog.outputs.version }}"
          with open("Cargo.toml", "r") as f:
              content = f.read()
          content = re.sub(r'^version = ".*"', f'version = "{version}"', content, flags=re.MULTILINE)
          with open("Cargo.toml", "w") as f:
              f.write(content)

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          tar -C target/${{ matrix.target }}/release -czvf droidtui-${{ github.ref_name }}-${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}

      - name: Package binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          7z a ../../../droidtui-${{ github.ref_name }}-${{ matrix.asset_name }}.zip ${{ matrix.artifact_name }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: droidtui-${{ github.ref_name }}-${{ matrix.asset_name }}
          path: droidtui-${{ github.ref_name }}-${{ matrix.asset_name }}.*

  release:
    name: Create GitHub Release
    needs: [generate-changelog, build]
    runs-on: ubuntu-latest
    steps:
      - name: Download changelog
        uses: actions/download-artifact@v4
        with:
          name: changelog

      - name: Download all build artifacts
        uses: actions/download-artifact@v4

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: RELEASE_CHANGELOG.md
          files: |
            droidtui-${{ github.ref_name }}-linux-x86_64/droidtui-${{ github.ref_name }}-linux-x86_64.tar.gz
            droidtui-${{ github.ref_name }}-windows-x86_64/droidtui-${{ github.ref_name }}-windows-x86_64.zip
            droidtui-${{ github.ref_name }}-macos-x86_64/droidtui-${{ github.ref_name }}-macos-x86_64.tar.gz
          token: ${{ secrets.GITHUB_TOKEN }}

  publish:
    name: Publish to crates.io
    needs: [generate-changelog, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Update version in Cargo.toml
        shell: python
        run: |
          import re
          version = "${{ needs.generate-changelog.outputs.version }}"
          with open("Cargo.toml", "r") as f:
              content = f.read()
          content = re.sub(r'^version = ".*"', f'version = "{version}"', content, flags=re.MULTILINE)
          with open("Cargo.toml", "w") as f:
              f.write(content)

      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CRATES_IO_TOKEN }} --allow-dirty
